import numpy as np # Экспорт библиотки "numpy"

def game_core_v3(number):
    """Исключи из поиска возможных вариантов единицу."""
    if number == 1: # Исключаем единицу из расчета в связи с невозможностью ее использования в предстоящем цикле
        return(number) # Возвращаем единицу, если она и есть загаданное число

    count = 1
    predict = np.random.randint(1, 101)
    my_num = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)
    """Использя числовой ряд простых чисел  установи любое рандомное число. Операцией деления на простые числа 
    сократи количество итераций поиска увеличением шага поиска искомого числа. Прими искомое число и возврати 
    количество попыток поиска."""
    for i in my_num:
        # Если предполагаемое число не является искомым и разница между искомым и предполагаемым искомым числами делится
        # без остатка, выводим шаг определения искомого числа и используем его для поиска в нашей функции
        if (number - predict) % i == 0:
            while number != predict:
                count += 1
                if number > predict:
                    predict += i
                elif number < predict:
                    predict -= i
        return(count)


def score_game(game_core):
    """Принимай искомое число, запускай игру 1000 раз и возврати среднее количество попыток поиска искомого числа"""
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(1,101, size=(1000))
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(np.mean(count_ls))
    print(f"Наш алгоритм определяет задуманное системой число в среднем за \033[31m {score}\033[0m попыток")
    return(score)

score_game(game_core_v3)